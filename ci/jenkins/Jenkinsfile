#!/usr/bin/env groovy

pipeline {
    agent none

    options {
        timestamps()
        timeout(time: 2, unit: 'HOURS')
    }

    parameters{
        choice choices: ['Release', 'Debug'], description: 'Build Type', name: 'BUILD_TYPE'
        string defaultValue: 'registry.zilliz.com', description: 'DOCKER REGISTRY URL', name: 'DOKCER_REGISTRY_URL', trim: true
        string defaultValue: 'ba070c98-c8cc-4f7c-b657-897715f359fc', description: 'DOCKER CREDENTIALS ID', name: 'DOCKER_CREDENTIALS_ID', trim: true
        string defaultValue: 'http://192.168.1.201/artifactory/arctern', description: 'JFROG ARTFACTORY URL', name: 'JFROG_ARTFACTORY_URL', trim: true
        string defaultValue: '1a527823-d2b7-44fd-834b-9844350baf14', description: 'JFROG CREDENTIALS ID', name: 'JFROG_CREDENTIALS_ID', trim: true
    }

    environment {
        PROJECT_NAME = "arctern"
        PIPELINE_NAME = "arctern-ci"
        LOWER_BUILD_TYPE = params.BUILD_TYPE.toLowerCase()
        SEMVER = "${BRANCH_NAME.contains('/') ? BRANCH_NAME.substring(BRANCH_NAME.lastIndexOf('/') + 1) : BRANCH_NAME}"
        IMAGE_REPOSITORY = "${PROJECT_NAME}/${PROJECT_NAME}-spark"
        GPU_IMAGE_REPOSITORY = "${IMAGE_REPOSITORY}-gpu"
        FLASK_IMAGE_REPOSITORY = "${PROJECT_NAME}/${PROJECT_NAME}-flask"
        ARCTERN_FLASK_REPO = "${params.DOKCER_REGISTRY_URL}/${FLASK_IMAGE_REPOSITORY}"
        ARCTERN_FLASK_TAG = "${SEMVER}"
        CONDA_CUSTOM_CHANNEL = "https://mirrors.sjtug.sjtu.edu.cn/anaconda/cloud/conda-forge/"
    }

    stages {
        stage ('Arctern Build and Test') {
            matrix {
                axes {
                    axis {
                        name 'OS_NAME'
                        values 'centos7'
                    }
                    axis {
                        name 'CPU_ARCH'
                        values 'amd64'
                    }
                    axis {
                        name 'BINARY_VERSION'
                        values 'gpu'
                    }
                }

                agent {
                    kubernetes {
                        label "${OS_NAME}-${BINARY_VERSION}-build-${env.PIPELINE_NAME}-${SEMVER}-${env.BUILD_NUMBER}"
                        defaultContainer 'jnlp'
                        yamlFile "ci/jenkins/pod/arctern-${BINARY_VERSION}-version-${OS_NAME}-build-env-pod.yaml"
                    }
                }

                stages {
                    stage('Build') {
                        steps {
                            container("arctern-${BINARY_VERSION}-build-env") {
                                script {
                                    load "${env.WORKSPACE}/ci/jenkins/step/build.groovy"
                                }
                            }
                        }
                    }
                    stage('Unit Test') {
                        steps {
                            container("arctern-${BINARY_VERSION}-build-env") {
                                script {
                                    load "${env.WORKSPACE}/ci/jenkins/step/unittest.groovy"
                                }
                            }
                        }
                    }
                    stage('Code Coverage') {
                        steps {
                            container("arctern-${BINARY_VERSION}-build-env") {
                                script {
                                    load "${env.WORKSPACE}/ci/jenkins/step/coverage.groovy"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage ('Packaged Arctern') {
            matrix {
                axes {
                    axis {
                        name 'OS_NAME'
                        values 'centos7'
                    }
                    axis {
                        name 'CPU_ARCH'
                        values 'amd64'
                    }
                    axis {
                        name 'BINARY_VERSION'
                        values 'gpu', 'cpu'
                    }
                }

                agent {
                    kubernetes {
                        label "${OS_NAME}-${BINARY_VERSION}-build-${env.PIPELINE_NAME}-${SEMVER}-${env.BUILD_NUMBER}"
                        defaultContainer 'jnlp'
                        yamlFile "ci/jenkins/pod/arctern-${BINARY_VERSION}-version-${OS_NAME}-build-env-pod.yaml"
                    }
                }

                environment {
                    ARTFACTORY_URL = "${params.JFROG_ARTFACTORY_URL}/conda/channel/${env.PIPELINE_NAME}/${SEMVER}/${CPU_ARCH}/${BINARY_VERSION}"
                }

                stages {
                    stage("Conda Build and Upload") {
                        steps {
                            container("arctern-${BINARY_VERSION}-build-env") {
                                script {
                                    load "${env.WORKSPACE}/ci/jenkins/step/condaBuild.groovy"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Build Arctern Web Server Image') {
            agent {
                kubernetes {
                    label "build-webserver-docker-${env.PIPELINE_NAME}-${SEMVER}-${env.BUILD_NUMBER}"
                    defaultContainer 'jnlp'
                    yamlFile 'ci/jenkins/pod/docker-pod.yaml'
                }
            }

            steps {
                container('docker-env') {
                    script {
                        load "${env.WORKSPACE}/ci/jenkins/step/buildArcternFlaskImage.groovy"
                    }
                }
            }
        }

        stage('Build Arctern Docker Images') {
            matrix {
                agent none
                axes {
                    axis {
                        name 'OS_NAME'
                        values 'ubuntu18.04', "centos7"
                    }
                    axis {
                        name 'CPU_ARCH'
                        values 'amd64'
                    }
                    axis {
                        name 'BINARY_VERSION'
                        values 'gpu', 'cpu'
                    }
                }

                environment {
                    ARTFACTORY_URL = "${params.JFROG_ARTFACTORY_URL}/conda/channel/${env.PIPELINE_NAME}/${SEMVER}/${CPU_ARCH}/${BINARY_VERSION}"
                    REPO_NAME = "${BINARY_VERSION.contains('gpu') ? GPU_IMAGE_REPOSITORY : IMAGE_REPOSITORY}"
                    ARCTERN_REPO = "${params.DOKCER_REGISTRY_URL}/${REPO_NAME}"
                    TAG_NAME = "${SEMVER}-${OS_NAME}-${LOWER_BUILD_TYPE}"
                    ARCTERN_TAG = "${TAG_NAME}"
                }

                stages {
                    stage('Build'){
                        agent {
                            kubernetes {
                                label "${OS_NAME}-${BINARY_VERSION}-build-docker-${env.PIPELINE_NAME}-${SEMVER}-${env.BUILD_NUMBER}"
                                defaultContainer 'jnlp'
                                yamlFile 'ci/jenkins/pod/docker-pod.yaml'
                            }
                        }

                        steps {
                            container('docker-env') {
                                script {
                                    load "${env.WORKSPACE}/ci/jenkins/step/buildArcternSparkImage.groovy"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Dev Test') {
            matrix {
                agent none
                axes {
                    axis {
                        name 'OS_NAME'
                        values 'ubuntu18.04', "centos7"
                    }
                    axis {
                        name 'CPU_ARCH'
                        values 'amd64'
                    }
                    axis {
                        name 'BINARY_VERSION'
                        values 'gpu', 'cpu'
                    }
                }

                environment {
                    REPO_NAME = "${BINARY_VERSION.contains('gpu') ? GPU_IMAGE_REPOSITORY : IMAGE_REPOSITORY}"
                    ARCTERN_REPO = "${params.DOKCER_REGISTRY_URL}/${REPO_NAME}"
                    TAG_NAME = "${SEMVER}-${OS_NAME}-${LOWER_BUILD_TYPE}"
                    ARCTERN_TAG = "${TAG_NAME}"
                    PYTEST_REPO = "${params.DOKCER_REGISTRY_URL}/library/pytest"
                    PYTEST_TAG = "v0.1.0"
                }

                stages {
                    stage('Arctern Spark Regression') {
                        agent {
                            label "performance"
                        }

                        steps {
                            script {
                                load "${env.WORKSPACE}/ci/jenkins/step/arcternSparkRegression.groovy"
                            }
                        }

                        post {
                            cleanup {
                                deleteDir() /* clean up our workspace */
                            }
                        }
                    }
                }
            }
        }
    }
}
