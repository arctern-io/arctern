include_directories(${CMAKE_CURRENT_SOURCE_DIR})
set(2d_src
        ${CMAKE_CURRENT_SOURCE_DIR}/render/2d/scatter_plot/pointmap.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/render/2d/choropleth_map/choropleth_map.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/render/2d/general_2d.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/render/2d/heatmap/heatmap.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/render/2d/heatmap/set_color.cpp
        )
set(window_src
        ${CMAKE_CURRENT_SOURCE_DIR}/render/window/window2d.cpp
        )

if (USE_GPU)
    set(window_src render/window/window_egl/window_gpu_2d.cpp
            render/2d/cuda/heatmap.cu)
else ()
    set(window_src render/window/window_osmesa/window_cpu_2d.cpp)
endif ()

set(util_src
        ${CMAKE_CURRENT_SOURCE_DIR}/render/utils/vega/vega_scatter_plot/vega_circle2d.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/render/utils/vega/vega_choropleth_map/vega_choropleth_map.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/render/utils/vega/vega.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/render/utils/vega/vega_heatmap/vega_heatmap.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/render/utils/color/color.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/render/utils/color/color_gradient.cpp
        )
set(arrow_src
        arrow/render_api.cpp
        )

set(render_src
        ${2d_src}
        ${window_src}
        ${util_src}
        ${arrow_src}
        )

include_directories(${CMAKE_BINARY_DIR}/thirdparty/include/antlr4-runtime)
set(antlr_generated_src
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/gdal/generated/wktBaseListener.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/gdal/generated/wktLexer.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/gdal/generated/wktListener.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/gdal/generated/wktParser.cpp
        )

set(gis_src
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/gis_functions.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/gdal/gis_functions.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/gdal/geometry_visitor.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/gdal/type_scan.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/gdal/format_conversion.cpp
        ${antlr_generated_src}
        )

set(cuda_gis_src
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/cuda/wkb/wkb_transforms.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/cuda/conversion/arrow_decode.cu
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/cuda/conversion/arrow_decode.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/cuda/conversion/arrow_encode.cu
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/cuda/conversion/arrow_encode.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/cuda/common/gis_definitions.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/cuda/common/gis_definitions.cu
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/cuda/functor/st_distance.cu
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/cuda/functor/st_within.cu
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/cuda/functor/st_length.cu
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/cuda/functor/st_area.cu
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/cuda/functor/st_envelope.cu
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/cuda/functor/st_point.cu
        ${CMAKE_CURRENT_SOURCE_DIR}/gis/cuda/gis_functions.cpp
        )

set(LIBRARY_TYPE SHARED)
if (STATIC_LIB_SWITCH)
    set(LIBRARY_TYPE STATIC)
endif (STATIC_LIB_SWITCH)

if (USE_GPU)
    add_library(
        arctern ${LIBRARY_TYPE}
        ${render_src}
        ${gis_src}
        ${cuda_gis_src}
    )
else ()
    add_library(
        arctern ${LIBRARY_TYPE}
        ${render_src}
        ${gis_src}
    )
endif ()

add_dependencies(windrose miniz_ep stb_ep antlr4_runtime_ep)

set(third_party_libs
        gdal
        arrow
        miniz
        antlr4-runtime
        )

set_property(TARGET arctern PROPERTY CUDA_STANDARD 14)
if (USE_GPU)
    set(third_party_libs
            ${third_party_libs}
            GL
            EGL
            cudart
            )
else ()
    set(third_party_libs
            ${third_party_libs}
            GLU
            OSMesa
            )
endif ()

target_link_libraries(arctern
            pthread
            ${third_party_libs}
)


install(TARGETS arctern
        DESTINATION lib)

